package com.dsw.view.manager;

import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import com.dsw.activity.view.BaseUI;

import android.content.Context;
import android.widget.RelativeLayout;

public class ContentManager implements Observer {
	private static ContentManager instance = new ContentManager();
	private ContentManager(){
		
	}
	
	public static ContentManager getInstance() {
		return instance;
	}
	
	private RelativeLayout relative_content;
	
	@Override
	public void update(Observable arg0, Object arg1) {
	
	}
	
	private Map<String,BaseUI> mapViewsCache = new HashMap<String, BaseUI>();
	private BaseUI currentUI;

	public void setRelative_content(RelativeLayout relative_content) {
		this.relative_content = relative_content;
	}
	
	
	// 每增加一个界面150K――16M
	// 内存不足
	// 处理的方案：
	// 第一种：控制VIEWCACHE集合的size
	// 第二种：Fragment代替，replace方法，不会缓存界面
	// 第三种：降低BaseUI的应用级别
	// 强引用：当前（GC宁可抛出OOM，不会回收BaseUI）
	// 软引用：在OOM之前被GC回收掉
	// 弱引用：一旦被GC发现了就回收
	// 虚引用：一旦创建了就被回收了

	// 都存在优缺点
	// 第一种：代码实现简单，适应性不强
	// 第二种：上一个Fragment被回收了，当内存充足的时候，运行速度损失过多
	// 第三种：优点，缺点：虽然引用级别降低，但是必须等待GC去回收，必须要提供给GC一个回收的时间，所以一旦申请内存速度过快，不适用
	// 瀑布流――Lrucache
	
	public BaseUI getCurrentUI(){
		return currentUI;
	}
	public Context getContext(){
		return relative_content.getContext();
	}
	public void changeUI(Class<? extends BaseUI> clazz){
		//判断是否为当前界面，控制界面切换按钮的连续点击，防止界面多次加载
		if(currentUI != null && currentUI.getClass() == clazz){
			return;
		}
		
		BaseUI targetUI = null;
		String key = clazz.getSimpleName();
		if(mapViewsCache.containsKey(key)){
			targetUI = mapViewsCache.get(key);
		}else{
			//进行创建ui,根据制定类，通过反射进行创建
			try {
				Constructor<? extends BaseUI> construct = clazz.getConstructor(Context.class);
				targetUI = construct.newInstance(getContext());
				mapViewsCache.put(key, targetUI);
			} catch (Exception e) {
				e.printStackTrace();
			} 
		}
		if(targetUI != null){
			relative_content.removeAllViews();
			relative_content.addView(targetUI.getContentView());
		}
	}
}
